STRUCTURE OF SQL

1. DDL - DATA DEFINITION LANGUAGE (CREATE, DROP, ALTER, TRUNCATE).
2. DML - DATA MANIPULATION LANGUAGE (INSERT, DELETE, UPDATE).
3. DQL - DATA MANIPULATION LANGUAGE (SELECT).
4. DCL - DATA CONTROL LANGUAGE (GRAND, INVOKE).
5. TCL - TRANSACTIONAL CONTROL LANGUAGE (COMMIT, ROLLBACK, SABE POINT).

.........................................................................................

Create database baseteste / drop database baseteste.

Ex. Tabelas: Membro, Realiza, Tarefa.

1. DDL - Data Definition Language

1.1 CREATE TABLE Membro(
	  id_membro INT PRIMARY KEY,
	  nome VARCHAR(50) NOT NULL,
	  papel VARCHAR(50)
    );
	
1.2 CREATE TABLE Tarefa(
	  id_tarefa INT,
	  descricao VARCHAR(30),
	  data_inicio DATE,
	  PRIMARY KEY (id_tarefa)
    );
	
1.3 CREATE TABLE Realiza(--Tabela fraca que faz relação entre Membro e Tarefa deve ser SEMPRE criado por último.
	  id_membro INT,
	  id_tarefa INT,
	  horas_alocadas NUMERIC,
	  PRIMARY KEY (id_membro,id_tarefa),
	  FOREIGN KEY (id_membro) REFERENCES Membro (id_membro),  --ON DELETE CASCADE  (deletará aumtomaticamente as tabelas pais e dependentes).
      FOREIGN KEY (id_tarefa) REFERENCES Tarefa (id_tarefa),  --ON DELETE RESTRICT (Mostrará erro se houver dependentes, para deletar deve deletar primeiro a dependente).

    );
	
1.4 DROP TABLE Membro;

2. DML - Data Manipulation Language

2.1 INSERT 

  INSERT INTO Membro (id_membro, nome, papel) VALUES (1, 'Ana', 'Analista');
  INSERT INTO Tarefa (id_tarefa, descricao, data_inicio) VALUES (3, 'Programação', '10/12/2021');
  INSERT INTO Realiza (id_membro, id_tarefa, horas_alocadas) VALUES (1,3,8);
  
2.2 DELETE

  DELETE FROM Membro WHERE id_membro=1;
    Obs: Se não definir a possibilidade de remoção na criação das tabelas, será definido por padrão  NO ACTION no ON DELETE.
  DELETE FROM Membro WHERE nome IS NULL; -- para campos onde estão NULL não se deve usar o = (errado), mas sim o operador IS NULL / IS NOT NULL (correto).
  DELETE FRO< Membro WHERE upper(nome) = 'ANA'; -- o postgre na estrutura não é case sensitive, mas para strings de campos é, portanto use sempre o upper ou lower.
  
2.3 UPDATE

  UPDATE funcionario SET nome='marioteste' WHERE id=1;
  
2.4 DELETE

  DELETE FROM funcionario WHERE id=1;
  
 --------------------------------------------------------------------------------------
 
3. FUNÇÕES DE AGREGAÇÕES POSTGRESQL

3.1 - avg() - calcula a média aritmética sobre o conjunto de linhas fornecido.

SELECT ROUND(AVG(salario),2) FROM funcionario;

3.2 - count() - retorna o número de linhas de entrada para o qual a expressão é não nula ou simplesmente o total caso seja especificado “*”.

SELECT COUNT(nome) FROM funcionario;

3.4 - max() - retorna o maior valor entre todos os fornecidos.

SELECT MAX(salario) FROM funcionario;

3.5 - min() - retorna o menor valor entre todos os fornecidos.

SELECT MIN(salario) FROM funcionario;

3.6 - sum() - calcula a soma da expressão sobre todas as linhas de entrada.

SELECT SUM(salario) FROM funcionario;

-------------------------------------------------------------------------------------

4. FUNCTIONS POSTGRESQL

-- DROP FUNCTION listaalunosaniversariantesmes(integer)

4.1 - sem parâmetro:

    CREATE OR REPLACE FUNCTION olaMundo() RETURNS varchar AS
	$$
	DECLARE
	  msg varchar := 'Olá Mundo!';
	BEGIN
	  RETURN msg;
	END;
	$$ LANGUAGE plpgsql;

	SELECT olaMundo();
	
4.2 com parâmetros:

	CREATE OR REPLACE FUNCTION aplicaTaxa(valor1 real, valor2 real) RETURNS real AS
	$$
	BEGIN
	  RETURN (valor1 + valor2) * 0.05;
	END;
	$$ LANGUAGE plpgsql;

	Exemplo de uso: SELECT aplicaTaxa(10,20);
	
4.3 com comandos DMLs:

	CREATE OR REPLACE FUNCTION addFuncionario (pNome varchar, pSalario numeric) RETURNS VOID AS
	$$
	DECLARE
	  --vars
	BEGIN
	  INSERT INTO funcionario (nome, salario) VALUES (pNome, pSalario);
	END;
	$$ LANGUAGE plpgsql;

	Exemplo de uso: SELECT addFuncionario ('Maria', 2500);
	
4.4 com PARAMETROS DE SAIDAS:

Ex. 4.4.1:

	CREATE OR REPLACE FUNCTION MaiorMenor(pA numeric, pB numeric, pC numeric, OUT pMaior numeric, OUT pMenor numeric) RETURNS RECORD AS
	--função passando 3 parâmetros, onde o Maior/Menor serão retornados...
	$$
	DECLARE
	  --vars
	BEGIN
	  pMaior := GREATEST(pA,pB,pC);
	  pMenor := LEAST(pA,pB,pC);
	END;
	$$ LANGUAGE plpgsql;

	Exemplo de uso: SELECT * FROM MaiorMenor(10,20,30);
	
Ex. 4.4.2:

	CREATE OR REPLACE FUNCTION MenorMaiorMedia( OUT pMenor numeric, OUT pMaior numeric, OUT pMedia numeric) RETURNS RECORD AS
	$$
	DECLARE
	  --vars
	BEGIN
	  SELECT MIN(salario) FROM funcionario INTO pMenor;
	  SELECT MAX(salario) FROM funcionario INTO pMaior;
	  SELECT ROUND(AVG(salario),2) FROM funcionario INTO pMedia;
	END;
	$$ LANGUAGE plpgsql;

	Exemplo de uso: SELECT * FROM MenorMaiorMedia();
	
-------------------------------------------------------------------------------------

5. COMANDOS CONDICIONAIS POSTGRESQL

Ex. 5.1:

    CREATE OR REPLACE FUNCTION AnalisaValor(pValor real) RETURNS VARCHAR AS
    $$
	BEGIN
	  IF pValor < 2 THEN
		--posso colocar comandos DMLs aqui...
		return 'É menor que 2';
	  ELSEIF pValor > 2 AND pValor < 5 THEN
	    return 'É maior que 2 e menor que 5';
	  ELSE
	    return 'é maior que 5';
	  END IF;
	END;
	$$ LANGUAGE plpgsql;

	Exemplo de uso: SELECT AnalisaValor(4);	  

Ex. 5.2:

    CREATE OR REPLACE FUNCTION isAcimaDaMedia(pId numeric) RETURNS boolean AS
	$$
	DECLARE 
	  media real;
	  salario_professor real;
	BEGIN
	  SELECT AVG(salario) from funcionario INTO media;
	  SELECT salario FROM funcionario WHERE id = pId INTO salario_professor;
	  
	  IF salario_professor > media THEN	   
		return True; 
	  ELSE
	    return False;
	  END IF;
	END;
	$$ LANGUAGE plpgsql;

	Exemplo de uso: SELECT isAcimaDaMedia(2);	
	
-------------------------------------------------------------------------------------

6. COMANDOS REPETIÇÃO POSTGRESQL

6.1 - FOR:

Ex. 6.1.1: - SIMPLES:

    DO 
	$MeuFor$
	DECLARE
	  i int;
	BEGIN
	  FOR i IN 1..5 
	  LOOP
		RAISE NOTICE 'Contador: %', i;
	  END LOOP;
	END;
	$MeuFor$
	
Ex. 6.1.2: - INCREMENTO DINÂMICO:

    DO 
	$MeuFor$
	DECLARE
	  i int;
	BEGIN
	  FOR i IN 1..20  BY 2 --INCREMENTA 2 EM 2
	  LOOP
		RAISE NOTICE 'Contador: %', i;
	  END LOOP;
	END;
	$MeuFor$
	
Ex. 6.1.3: - REVERSE SIMPLES:

	DO 
	$MeuFor$
	DECLARE
	  i int;
	BEGIN
	  FOR i IN REVERSE 20..1  
	  LOOP
		RAISE NOTICE 'Contador: %', i;
	  END LOOP;
	END;
	$MeuFor$
	
Ex. 6.1.4: - REVERSE DINÂMICO:

	DO 
	$MeuFor$
	DECLARE
	  i int;
	BEGIN
	  FOR i IN REVERSE 20..1 BY 2 
	  LOOP
		RAISE NOTICE 'Contador: %', i;
	  END LOOP;
	END;
	$MeuFor$
	
Ex. 6.1.5: -  FOR NUMA QUERY 01:

	CREATE OR REPLACE FUNCTION um_loop_numa_query(n integer) RETURNS varchar AS
	$$
	DECLARE
	  rec RECORD;
	BEGIN
	  FOR rec IN SELECT nome FROM ALUNOS ORDER BY nome LIMIT n
	  LOOP
		RAISE NOTICE '%', rec.nome; -- % - parâmetro da variável nome dentro do record.
	  END LOOP;
	END;
	$$
	LANGUAGE plpgsql;

	Exemplo de uso: SELECT um_loop_numa_query(3); 
	
Ex. 6.1.6: -  FOR NUMA QUERY 02:

	CREATE OR REPLACE FUNCTION mostraFuncionarios() RETURNS void AS
	$$
	DECLARE
	  tupla RECORD;
	  i integer := 1;
	BEGIN
	  FOR tupla IN SELECT * FROM ALUNOS ORDER BY nome 
	  LOOP
		RAISE NOTICE 'Código: %, Aluno: %, Idade: %', i, tupla.nome, tupla.idade;   -- % - parâmetros + Variáveis.
		i := i + 1;
	  END LOOP;
	END;
	$$
	LANGUAGE plpgsql;

	Exemplo de uso: SELECT mostraFuncionarios();
	
Ex. 6.1.7: -  FOR NUM ARRAY:

	CREATE OR REPLACE FUNCTION mostraNaturais(n integer) RETURNS INTEGER[] AS
	$$
	DECLARE
	  resultado integer[];
	  i integer;
	BEGIN
	  FOR i IN 1..n
	  LOOP
		resultado[i] := i; 	
	  END LOOP;
	  RETURN resultado;
	END;
	$$
	LANGUAGE plpgsql;

	Exemplo de uso: SELECT mostraNaturais(10);
	
Ex. 6.1.8: -  FOR NUM ARRAY LISTANDO ANIVERSARIANTES DO MES:

	CREATE OR REPLACE FUNCTION listaAlunosAniversariantesMes(pMes integer) RETURNS varchar[] AS
	$$
	DECLARE
	  resultado varchar[];
	  tupla record;
	  mes_aniversario int;
	  i integer := 0;
	BEGIN
	  FOR tupla IN SELECT * FROM alunos
	  LOOP
		SELECT  EXTRACT(MONTH FROM tupla.data_nascimento)  INTO mes_aniversario; --extrai o mes da tupla e insere na variavel.
		IF (mes_aniversario = pMes) THEN --compara o mes_aniversario se é o mesmo do parâmetro.
		  resultado[i] := tupla.nome; --se sim, add no array o codigo do alunos.
		  i:= i + 1;
		END IF;	
	  END LOOP;
	  RETURN resultado; --retorna um array de inteiros com os IDs dos alunos
	END;
	$$
	LANGUAGE plpgsql;

	--DROP FUNCTION listaalunosaniversariantesmes(integer)

	Exemplo de uso: SELECT listaAlunosAniversariantesMes(6);


	
6.2 - WHILE

	DO 
	$MeuWhile$
	DECLARE
	  i int;
	BEGIN
	  i := 2;
	  WHILE i< 10 LOOP
		RAISE NOTICE 'Contador: %', i;
		I:= I+1;
	  END LOOP;
	END;
	$MeuWhile$




